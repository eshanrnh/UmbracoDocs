name: Check Links In Pull Requests

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.md'   # Only trigger workflow if any Markdown files change

jobs:
  check-links:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout GitHub repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Check out base branch
      - name: Check out base branch
        run: git checkout ${{ github.event.pull_request.base.ref }}

      # Step 3: Get changed Markdown files
      - name: Get changed Markdown files
        id: changed-files
        run: |
          files=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} ${{ github.head_ref }} | grep '\.md$' || true)
          echo "changed_files=$files" >> $GITHUB_ENV
          echo "Changed Markdown files:"
          echo "$files"

      # Step 4: Skip workflow if no Markdown files changed
      - name: Skip if no Markdown files changed
        if: ${{ env.changed_files == '' }}
        run: |
          echo "No Markdown files changed in this PR. Skipping link check."
          exit 0

      # Step 5: Dump base branch links for changed files only (no fragments)
      - name: Dump base branch links
        uses: lycheeverse/lychee-action@v2
        with:
          args: "--dump ${{ env.changed_files }}"
          output: ./existing-links.txt
        continue-on-error: true

      # Step 6: Stash untracked files and switch back to feature branch
      - name: Stash untracked files
        run: git stash push --include-untracked

      - name: Check out feature branch
        run: git checkout ${{ github.head_ref }}

      - name: Apply stashed changes
        run: git stash pop || true

      # Step 7: Add base branch links to .lycheeignore
      - name: Update ignore file
        run: |
          if [ -f "existing-links.txt" ]; then
            cat existing-links.txt >> .lycheeignore
          fi

      # Step 8: Run Lychee on changed files one by one and extract broken links
      - name: Run Lychee link checker
        id: lychee
        continue-on-error: true
        run: |
          rm -f lychee-full-report.txt
          for f in ${{ env.changed_files }}; do
            echo "Checking links in $f"
            lychee --no-progress --include-fragments "$f" >> lychee-full-report.txt || true
          done

          # Extract only broken links
          if [ -f lychee-full-report.txt ]; then
            grep -E "❌|ERROR" lychee-full-report.txt > lychee-broken.txt || true
          else
            echo "No report generated." > lychee-broken.txt
          fi

          echo "full_report=lychee-full-report.txt" >> $GITHUB_ENV
          echo "broken_report=lychee-broken.txt" >> $GITHUB_ENV

      # Step 9: Upload full report for debugging (optional)
      - name: Upload full Lychee report
        uses: actions/upload-artifact@v4
        with:
          name: lychee-full-report
          path: ${{ env.full_report }}

      # Step 10: Post PR comment with only broken links
      - name: Comment broken links on PR
        if: always()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: ${{ env.broken_report }}

      # Step 11: Fail if broken links exist
      - name: Fail on broken links
        if: steps.lychee.outcome == 'failure'
        run: |
          echo "::error::Broken links detected. See the PR comment above for details."
          exit 1
