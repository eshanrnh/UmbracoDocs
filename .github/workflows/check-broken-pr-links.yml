name: Check Links in Pull Requests

on:
  pull_request:
    branches:
      - main
    paths:
      - '**/*.md'

jobs:
  check-links:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Get changed Markdown files in the PR
      - name: Get changed Markdown files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.md$' || true)
          CHANGED_FILES="${CHANGED_FILES//$'\n'/ }"   # replace newlines with spaces
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "Changed Markdown files: $CHANGED_FILES"

      # 3Ô∏è‚É£ Skip if no Markdown files changed
      - name: Skip if no changed Markdown files
        if: env.CHANGED_FILES == ''
        run: |
          echo "No Markdown files changed. Skipping link check."
          exit 0

      # 4Ô∏è‚É£ Run Lychee on changed files (compact output)
      - name: Run Lychee
        id: run-lychee
        uses: lycheeverse/lychee-action@v2
        with:
          args: |
            --no-progress
            --include-fragments
            --format compact
            ${{ env.CHANGED_FILES }}
          output: lychee/out_raw.md
          fail: false   # ‚úÖ don't fail yet, let us capture output

      # 5Ô∏è‚É£ Clean Lychee output (remove summary line + mark if has content)
      - name: Format Lychee output for PR comment
        id: format-output
        if: always()
        run: |
          mkdir -p lychee

          # Start the comment
          echo "üö® **Link Checker found issues in this PR**" > lychee/comment.md
          echo "" >> lychee/comment.md
      
          # Process Lychee compact output to be user-friendly
          awk '
            /^\[.*\]:/ {
              # Extract file path
              file=$0
              gsub(/[\[\]]/, "", file)
              print "\n**File:** " file >> "lychee/comment.md"
              next
            }
      
            /\[ERROR\]/ {
              # Broken anchor
              match($0, /\[ERROR\] (.*)/, m)
              msg=m[1]
              print "- ‚öì Anchor not found ‚Üí " msg >> "lychee/comment.md"
              next
            }
      
            /\[404\]/ {
              # Broken link
              match($0, /\[404\] ([^|]+)/, m)
              url=m[1]
              print "- ‚ùå 404 Not Found ‚Üí " url >> "lychee/comment.md"
              next
            }
      
            /\[301\]|\[302\]/ {
              match($0, /\[(301|302)\] ([^|]+)/, m)
              code=m[1]; url=m[2]
              print "- üîÄ Redirected (" code ") ‚Üí " url >> "lychee/comment.md"
              next
            }
      
            /Timeout/ {
              match($0, /Timeout ([^|]+)/, m)
              url=m[1]
              print "- ‚è≥ Timeout ‚Üí " url >> "lychee/comment.md"
              next
            }
          ' lychee/out_raw.md
      
          # Mark if the comment has content
          if [ -s lychee/comment.md ]; then
            echo "has_content=true" >> $GITHUB_OUTPUT
          else
            echo "has_content=false" >> $GITHUB_OUTPUT
          fi


      # 6Ô∏è‚É£ Comment broken links on PR
      - name: Comment broken links
        if: always() && (env.CHANGED_FILES != '') && (steps.format-output.outputs.has_content == 'true')
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: lychee/comment.md
          recreate: true
          
      # 7Ô∏è‚É£ Fail workflow if broken links are found
      - name: Fail workflow if broken links
        if: steps.format-output.outputs.has_content == 'true'
        run: |
          echo "‚ùå Broken links detected. Please review the PR comment for details."
          exit 1
